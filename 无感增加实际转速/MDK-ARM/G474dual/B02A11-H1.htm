<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [G474dual\B02A11-H1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image G474dual\B02A11-H1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 24 14:48:56 2022
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">NMI_Handler</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
 <LI><a href="#[1b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">SVC_Handler</a><BR>
 <LI><a href="#[1c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">DebugMon_Handler</a><BR>
 <LI><a href="#[1d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PendSV_Handler</a><BR>
 <LI><a href="#[58]">COMP1_2_3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">COMP1_2_3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a> from stm32g4xx_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[58]">COMP1_2_3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[59]">COMP4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[63]">CORDIC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5a]">CRS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[68]">ConsumerHeartbeatAlarm</a> from canopen_lifegrd.o(i.ConsumerHeartbeatAlarm) referenced from canopen_lifegrd.o(i.HeartBeat_Message_Handle)
 <LI><a href="#[2a]">DMA1_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[52]">DMA2_Channel1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[53]">DMA2_Channel2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[55]">DMA2_Channel4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[56]">DMA2_Channel5_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[62]">DMA2_Channel6_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[61]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from stm32g4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[46]">EXTI15_10_IRQHandler</a> from stm32g4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from stm32g4xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from stm32g4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[35]">EXTI9_5_IRQHandler</a> from stm32g4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[33]">FDCAN1_IT0_IRQHandler</a> from stm32g4xx_it.o(i.FDCAN1_IT0_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[34]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[64]">FMAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from stm32g4xx_mc_it.o(i.HardFault_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3e]">I2C1_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3d]">I2C1_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[40]">I2C2_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3f]">I2C2_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[60]">I2C3_ER_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5f]">I2C3_EV_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4d]">LPTIM1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5e]">LPUART1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[18]">MemManage_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[2]">ODCallback_t_Index1010_Subindex1</a> from canopen_od.o(i.ODCallback_t_Index1010_Subindex1) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[3]">ODCallback_t_Index1016_Subindex</a> from canopen_lifegrd.o(i.ODCallback_t_Index1016_Subindex) referenced 12 times from canopen_od.o(.data)
 <LI><a href="#[0]">ODCallback_t_Index2011_Subindex0</a> from canopen_od.o(i.ODCallback_t_Index2011_Subindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[1]">ODCallback_t_Index2012_Subindex0</a> from canopen_od.o(i.ODCallback_t_Index2012_Subindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[4]">ODCallback_t_RPDO_Communicate</a> from canopen_pdo.o(i.ODCallback_t_RPDO_Communicate) referenced 4 times from canopen_od.o(.data)
 <LI><a href="#[6]">ODCallback_t_RPDO_Map</a> from canopen_pdo.o(i.ODCallback_t_RPDO_Map) referenced 16 times from canopen_od.o(.data)
 <LI><a href="#[5]">ODCallback_t_RPDO_MapSubindex0</a> from canopen_pdo.o(i.ODCallback_t_RPDO_MapSubindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[7]">ODCallback_t_TPDO_Communicate</a> from canopen_pdo.o(i.ODCallback_t_TPDO_Communicate) referenced 12 times from canopen_od.o(.data)
 <LI><a href="#[9]">ODCallback_t_TPDO_Map</a> from canopen_pdo.o(i.ODCallback_t_TPDO_Map) referenced 16 times from canopen_od.o(.data)
 <LI><a href="#[8]">ODCallback_t_TPDO_MapSubindex0</a> from canopen_pdo.o(i.ODCallback_t_TPDO_MapSubindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[f]">ObjDict_scanIndexOD</a> from canopen_od.o(i.ObjDict_scanIndexOD) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[10]">ObjDict_valueRangeTest</a> from canopen_od.o(i.ObjDict_valueRangeTest) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[6c]">OnHeartbeatProducerUpdate</a> from canopen_lifegrd.o(i.OnHeartbeatProducerUpdate) referenced from canopen_lifegrd.o(i.heartbeatInit)
 <LI><a href="#[6b]">OnNumberOfErrorsUpdate</a> from canopen_emcy.o(i.OnNumberOfErrorsUpdate) referenced from canopen_emcy.o(i.emergencyInit)
 <LI><a href="#[6e]">PDOEventTimerAlarm</a> from canopen_pdo.o(i.PDOEventTimerAlarm) referenced from canopen_pdo.o(i.sendOnePDOevent)
 <LI><a href="#[6f]">PDOInhibitTimerAlarm</a> from canopen_pdo.o(i.PDOInhibitTimerAlarm) referenced from canopen_pdo.o(i.sendOnePDOevent)
 <LI><a href="#[20]">PVD_PVM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[6d]">ProducerHeartbeatAlarm</a> from canopen_lifegrd.o(i.ProducerHeartbeatAlarm) referenced from canopen_lifegrd.o(i.heartbeatInit)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5d]">RNG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[47]">RTC_Alarm_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[21]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[22]">RTC_WKUP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[69]">SDOTimeoutAlarm</a> from canopen_sdo.o(i.SDOTimeoutAlarm) referenced 2 times from canopen_sdo.o(i.SDO_Email_Handler)
 <LI><a href="#[69]">SDOTimeoutAlarm</a> from canopen_sdo.o(i.SDOTimeoutAlarm) referenced from canopen_sdo.o(i.initSDOline)
 <LI><a href="#[41]">SPI1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[42]">SPI2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from stm32g4xx_mc_it.o(i.SysTick_Handler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32g4xx.o(i.SystemInit) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[36]">TIM1_BRK_TIM15_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[39]">TIM1_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[38]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[37]">TIM1_UP_TIM16_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3a]">TIM2_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM2_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3b]">TIM3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[3c]">TIM4_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM4_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[50]">TIM6_DAC_IRQHandler</a> from canopen_timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[51]">TIM7_DAC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[49]">TIM8_BRK_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM8_BRK_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4c]">TIM8_CC_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4b]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4a]">TIM8_UP_IRQHandler</a> from stm32g4xx_mc_it.o(i.TIM8_UP_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[57]">UCPD1_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[43]">USART1_IRQHandler</a> from agreement.o(i.USART1_IRQHandler) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[44]">USART2_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[45]">USART3_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[48]">USBWakeUp_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[31]">USB_HP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[32]">USB_LP_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32g431xx.o(.text) referenced from startup_stm32g431xx.o(RESET)
 <LI><a href="#[12]">_RxPDO_EventTimers_Handler</a> from canopen_pdo.o(i._RxPDO_EventTimers_Handler) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g431xx.o(.text)
 <LI><a href="#[d]">_heartbeatError</a> from canopen_lifegrd.o(i._heartbeatError) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[a]">_initialisation</a> from canopen_nmt.o(i._initialisation) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[c]">_operational</a> from canopen_nmt.o(i._operational) referenced 4 times from canopen_od.o(.data)
 <LI><a href="#[e]">_post_SlaveStateChange</a> from canopen_lifegrd.o(i._post_SlaveStateChange) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[14]">_post_TPDO</a> from canopen_sync.o(i._post_TPDO) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[13]">_post_sync</a> from canopen_sync.o(i._post_sync) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[b]">_preOperational</a> from canopen_nmt.o(i._preOperational) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[11]">_storeODSubIndex</a> from canopen_od.o(i._storeODSubIndex) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[6a]">fputc</a> from main.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[1d0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[70]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1d2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1d4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_2_3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_2_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>COMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_Index1016_Subindex
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_MapSubindex0
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Map
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Communicate
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_MapSubindex0
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_Map
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_Communicate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_SetODentry
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1cf]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1dc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1dd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1de]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32g4xx_it.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ADC1_2_IRQHandler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADCEx_InjectedConvCpltCallback &rArr; SetMotorSpeed &rArr; BLDC2_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>ADC_Enable</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
</UL>

<P><STRONG><a name="[84]"></a>BEMF</STRONG> (Thumb, 1048 bytes, Stack size 40 bytes, sensorless bldc.o(i.BEMF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BEMF
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mul_change
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_Start
</UL>

<P><STRONG><a name="[87]"></a>BLDC1_OverSpdChk</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, function.o(i.BLDC1_OverSpdChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BLDC1_OverSpdChk &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[89]"></a>BLDC1_PhaseChange</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, bsp_bdcmotor.o(i.BLDC1_PhaseChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BLDC1_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle0
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[8a]"></a>BLDC2_OverSpdChk</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, function.o(i.BLDC2_OverSpdChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BLDC2_OverSpdChk &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[8b]"></a>BLDC2_PhaseChange</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, bsp_bdcmotor.o(i.BLDC2_PhaseChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BLDC2_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[8c]"></a>BLDCB_Phase_Check</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, function.o(i.BLDCB_Phase_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BLDCB_Phase_Check &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[8d]"></a>BLDC_Stuck_Chk</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, function.o(i.BLDC_Stuck_Chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BLDC_Stuck_Chk &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[8f]"></a>CAN2_Send_Msg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(i.CAN2_Send_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBootUp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSDO
</UL>

<P><STRONG><a name="[91]"></a>CANopen_Parameter_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, canopen_od.o(i.CANopen_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CANopen_Parameter_Init &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>CheckSum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, agreement.o(i.CheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startagreement
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnError1
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF3
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funEF
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_fun3
</UL>

<P><STRONG><a name="[68]"></a>ConsumerHeartbeatAlarm</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, canopen_lifegrd.o(i.ConsumerHeartbeatAlarm))
<BR>[Address Reference Count : 1]<UL><LI> canopen_lifegrd.o(i.HeartBeat_Message_Handle)
</UL>
<P><STRONG><a name="[1cb]"></a>CopyBits</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, canopen_pdo.o(i.CopyBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[13e]"></a>DelAlarm</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canopen_timer.o(i.DelAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Communicate
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[95]"></a>EAC_Exec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, enc_align_ctrl.o(i.EAC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EAC_Exec
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetMecAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1bc]"></a>EAC_IsAligned</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_IsAligned))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[1be]"></a>EAC_SetRestartState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_SetRestartState))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[97]"></a>EAC_StartAlignment</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, enc_align_ctrl.o(i.EAC_StartAlignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EAC_StartAlignment &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[9c]"></a>ENC_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, encoder_speed_pos_fdbk.o(i.ENC_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENC_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1b5]"></a>ENC_Clear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[96]"></a>ENC_SetMecAngle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
</UL>

<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Config
</UL>

<P><STRONG><a name="[1c4]"></a>FCP_CalcCRC</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_CalcCRC))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
</UL>

<P><STRONG><a name="[33]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[e3]"></a>FLASH_PageErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[a6]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32g4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[a7]"></a>FOC_CalcCurrRef</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mc_tasks.o(i.FOC_CalcCurrRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[aa]"></a>FOC_Clear</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mc_tasks.o(i.FOC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FOC_Clear &rArr; FW_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1b8]"></a>FOC_InitAdditionalMethods</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mc_tasks.o(i.FOC_InitAdditionalMethods))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[a9]"></a>FW_CalcCurrRef</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, flux_weakening_ctrl.o(i.FW_CalcCurrRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Sqrt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetUpperIntegralTermLimit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetLowerIntegralTermLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
</UL>

<P><STRONG><a name="[ae]"></a>FW_Clear</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, flux_weakening_ctrl.o(i.FW_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FW_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[b4]"></a>FlashRight</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, agreement.o(i.FlashRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FlashRight &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startagreement
</UL>

<P><STRONG><a name="[1cd]"></a>Flash_Read_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, flash.o(i.Flash_Read_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Read_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>Flash_WriteCheck</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, agreement.o(i.Flash_WriteCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Flash_WriteCheck &rArr; InternalFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>GetMotorSpeed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, bsp_bdcmotor.o(i.GetMotorSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stuck_Chk
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[b7]"></a>HALLSTUDY_PhaseChange1</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bsp_bdcmotor.o(i.HALLSTUDY_PhaseChange1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HALLSTUDY_PhaseChange1 &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle1
</UL>

<P><STRONG><a name="[b8]"></a>HALL_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, hall_speed_pos_fdbk.o(i.HALL_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HALL_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[b9]"></a>HALL_Clear</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hall_speed_pos_fdbk.o(i.HALL_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HALL_Clear &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init_Electrical_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[bb]"></a>HALL_GetPhase1</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_bdcmotor.o(i.HALL_GetPhase1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HALL_GetPhase1
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Drive_Para
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[bd]"></a>HALL_GetPhase2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_bdcmotor.o(i.HALL_GetPhase2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Drive_Para
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1af]"></a>HALL_TIMx_CC_IRQHandler</STRONG> (Thumb, 836 bytes, Stack size 28 bytes, hall_speed_pos_fdbk.o(i.HALL_TIMx_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HALL_TIMx_CC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HALL_TIMx_UP_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hall_speed_pos_fdbk.o(i.HALL_TIMx_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HALL_TIMx_UP_IRQHandler &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init_Electrical_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_ADCEx_EndOfSamplingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_EndOfSamplingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 1540 bytes, Stack size 32 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADCEx_InjectedConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32g4xx_it.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADCEx_InjectedConvCpltCallback &rArr; SetMotorSpeed &rArr; BLDC2_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorStop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_ADCEx_InjectedQueueOverflowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedQueueOverflowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_ADCEx_InjectedStart_IT</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADCEx_InjectedStart_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>HAL_ADCEx_LevelOutOfWindow2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_LevelOutOfWindow2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_ADCEx_LevelOutOfWindow3Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_LevelOutOfWindow3Callback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 1270 bytes, Stack size 32 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 716 bytes, Stack size 32 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADCEx_InjectedConvCpltCallback &rArr; SetMotorSpeed &rArr; BLDC2_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow3Callback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow2Callback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedQueueOverflowCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EndOfSamplingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_ADC_Init</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 284 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Config
</UL>

<P><STRONG><a name="[90]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>

<P><STRONG><a name="[a1]"></a>HAL_FDCAN_ConfigFilter</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_ConfigFilter))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Config
</UL>

<P><STRONG><a name="[a3]"></a>HAL_FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_ConfigGlobalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_ConfigGlobalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Config
</UL>

<P><STRONG><a name="[d8]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_FDCAN_GetRxFifoFillLevel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_GetRxFifoFillLevel))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[e0]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[ce]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxFifoFillLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Config
</UL>

<P><STRONG><a name="[d6]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, stm32g4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash
</UL>

<P><STRONG><a name="[146]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash
</UL>

<P><STRONG><a name="[e6]"></a>HAL_FLASH_Program</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash
</UL>

<P><STRONG><a name="[144]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash
</UL>

<P><STRONG><a name="[e9]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 844 bytes, Stack size 40 bytes, stm32g4xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorB_Default_Phase_Cheek_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorA_Default_Phase_Cheek_IT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCB_Phase_Check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC2_PhaseChange
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC1_PhaseChange
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_GPIO_Init</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[bc]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase1
</UL>

<P><STRONG><a name="[86]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEMF
</UL>

<P><STRONG><a name="[dc]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[7b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[158]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32g4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32g4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_I2C_Init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, stm32g4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_readReg
</UL>

<P><STRONG><a name="[f3]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, stm32g4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_writeReg
</UL>

<P><STRONG><a name="[ed]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_IWDG_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32g4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>HAL_InitTick</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
</UL>

<P><STRONG><a name="[de]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[dd]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fc]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 720 bytes, Stack size 40 bytes, stm32g4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreqFromPLLSource
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[103]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1310 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[105]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SYSTICK_Callback &rArr; SetMotorSpeed &rArr; BLDC2_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorStop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Regulator
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_VoltageCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle0
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorSpeed
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stuck_Chk
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC2_OverSpdChk
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC1_OverSpdChk
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10c]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SYSTICK_IRQHandler &rArr; HAL_SYSTICK_Callback &rArr; SetMotorSpeed &rArr; BLDC2_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[116]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_BreakCallback &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[160]"></a>HAL_TIMEx_ConfigBreakInput</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakInput
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIMEx_DirectionChangeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_DirectionChangeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIMEx_EncoderIndexCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_EncoderIndexCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIMEx_IndexErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_IndexErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIMEx_TransitionErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_TransitionErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Sensorless_Start &rArr; BEMF
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_TransitionErrorCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_IndexErrorCallback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_EncoderIndexCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_DirectionChangeCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Sensorless_Start &rArr; BEMF
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_Start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorB_Default_Phase_Cheek
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_UART_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_UART_MspInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnError1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRight
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnRight
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF3
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funEF
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_fun3
</UL>

<P><STRONG><a name="[108]"></a>HallStudyHandle0</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, bsp_bdcmotor.o(i.HallStudyHandle0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HallStudyHandle0 &rArr; BLDC1_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC1_PhaseChange
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearFault
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[109]"></a>HallStudyHandle1</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, bsp_bdcmotor.o(i.HallStudyHandle1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HallStudyHandle1 &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearFault
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALLSTUDY_PhaseChange1
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>HeartBeat_Message_Handle</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, canopen_lifegrd.o(i.HeartBeat_Message_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HeartBeat_Message_Handle &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[142]"></a>Init_Drive_Para</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, function.o(i.Init_Drive_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Drive_Para &rArr; HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase1
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>InternalFlash</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, flash.o(i.InternalFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InternalFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startagreement
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteCheck
</UL>

<P><STRONG><a name="[147]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[148]"></a>MCI_StopMotor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>

<P><STRONG><a name="[af]"></a>MCM_Sqrt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[136]"></a>MC_ClearFault</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, function.o(i.MC_ClearFault))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_VoltageCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle0
</UL>

<P><STRONG><a name="[14a]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_tasks.o(i.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[14b]"></a>MC_Scheduler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mc_tasks.o(i.MC_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MC_Scheduler &rArr; TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[88]"></a>MC_SetFault</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, function.o(i.MC_SetFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_VoltageCheck
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorB_Default_Phase_Cheek
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle0
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC_Stuck_Chk
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC2_OverSpdChk
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC1_OverSpdChk
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorB_Default_Phase_Cheek_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorA_Default_Phase_Cheek_IT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDCB_Phase_Check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC2_PhaseChange
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC1_PhaseChange
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALLSTUDY_PhaseChange1
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorlessBLDC1_PhaseChange
</UL>

<P><STRONG><a name="[16b]"></a>MC_SetFault1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, function.o(i.MC_SetFault1))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorB_Default_Phase_Cheek_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorA_Default_Phase_Cheek_IT
</UL>

<P><STRONG><a name="[14f]"></a>MC_StopMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StopMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_StopMotor1 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heartbeatError
</UL>

<P><STRONG><a name="[150]"></a>MC_StopMotor2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StopMotor2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_StopMotor2 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heartbeatError
</UL>

<P><STRONG><a name="[179]"></a>MPM_CalcElMotorPower</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_CalcElMotorPower))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
</UL>

<P><STRONG><a name="[1b9]"></a>MPM_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[165]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, agreement.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>MessageType_Check</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, canopen_nmt.o(i.MessageType_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[ea]"></a>MotorA_Default_Phase_Cheek_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, function.o(i.MotorA_Default_Phase_Cheek_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MotorA_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[12b]"></a>MotorB_Default_Phase_Cheek</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, function.o(i.MotorB_Default_Phase_Cheek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorB_Default_Phase_Cheek &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[eb]"></a>MotorB_Default_Phase_Cheek_IT</STRONG> (Thumb, 260 bytes, Stack size 36 bytes, function.o(i.MotorB_Default_Phase_Cheek_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MotorB_Default_Phase_Cheek_IT &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[85]"></a>Mul_change</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, sensorless bldc.o(i.Mul_change))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEMF
</UL>

<P><STRONG><a name="[167]"></a>Net_Manager_Handle</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, canopen_nmt.o(i.Net_Manager_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[2]"></a>ODCallback_t_Index1010_Subindex1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, canopen_od.o(i.ODCallback_t_Index1010_Subindex1))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ODCallback_t_Index1016_Subindex</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, canopen_lifegrd.o(i.ODCallback_t_Index1016_Subindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_Index1016_Subindex
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>ODCallback_t_Index2011_Subindex0</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canopen_od.o(i.ODCallback_t_Index2011_Subindex0))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>ODCallback_t_Index2012_Subindex0</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, canopen_od.o(i.ODCallback_t_Index2012_Subindex0))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ODCallback_t_RPDO_Communicate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, canopen_pdo.o(i.ODCallback_t_RPDO_Communicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ODCallback_t_RPDO_Communicate
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ODCallback_t_RPDO_Map</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, canopen_pdo.o(i.ODCallback_t_RPDO_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ODCallback_t_RPDO_Map
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjDict_Get_Id
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ODCallback_t_RPDO_MapSubindex0</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_RPDO_MapSubindex0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_RPDO_MapSubindex0
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ODCallback_t_TPDO_Communicate</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_TPDO_Communicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ODCallback_t_TPDO_Communicate &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ODCallback_t_TPDO_Map</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_TPDO_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_TPDO_Map
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjDict_Get_Id
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ODCallback_t_TPDO_MapSubindex0</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_TPDO_MapSubindex0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_TPDO_MapSubindex0
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>OD_Index_san</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canopen_objacces.o(i.OD_Index_san))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_Index_san
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>

<P><STRONG><a name="[16e]"></a>ObjDict_Get_Id</STRONG> (Thumb, 1494 bytes, Stack size 0 bytes, canopen_od.o(i.ObjDict_Get_Id))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Map
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_Map
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_Trans_Init
</UL>

<P><STRONG><a name="[f]"></a>ObjDict_scanIndexOD</STRONG> (Thumb, 1828 bytes, Stack size 16 bytes, canopen_od.o(i.ObjDict_scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ObjDict_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>ObjDict_valueRangeTest</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canopen_od.o(i.ObjDict_valueRangeTest))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canopen_lifegrd.o(i.OnHeartbeatProducerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[6b]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, canopen_emcy.o(i.OnNumberOfErrorsUpdate))
<BR>[Address Reference Count : 1]<UL><LI> canopen_emcy.o(i.emergencyInit)
</UL>
<P><STRONG><a name="[10a]"></a>Over_VoltageCheck</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, function.o(i.Over_VoltageCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Over_VoltageCheck &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearFault
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[6e]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canopen_pdo.o(i.PDOEventTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Communicate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[6f]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canopen_pdo.o(i.PDOInhibitTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PDOInhibitTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[172]"></a>PDOInit</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, canopen_pdo.o(i.PDOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_Index_san
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_Trans_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[176]"></a>PDOStop</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, canopen_pdo.o(i.PDOStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PDOStop
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[b1]"></a>PID_GetKIDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKIDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[143]"></a>PID_Init</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, pid.o(i.PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Drive_Para
</UL>

<P><STRONG><a name="[107]"></a>PID_Regulator</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, pid.o(i.PID_Regulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PID_Regulator
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[ab]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Clear
</UL>

<P><STRONG><a name="[b2]"></a>PID_SetLowerIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetLowerIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[b3]"></a>PID_SetUpperIntegralTermLimit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetUpperIntegralTermLimit))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[b0]"></a>PI_Controller</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, pid_regulator.o(i.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_CalcCurrRef
</UL>

<P><STRONG><a name="[177]"></a>PQD_CalcElMotorPower</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pqd_motor_power_measurement.o(i.PQD_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PQD_CalcElMotorPower
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_CalcElMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[17a]"></a>PWMC_CurrentReadingCalibr</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(i.PWMC_CurrentReadingCalibr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_CurrentReadingCalibr
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ad]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
</UL>

<P><STRONG><a name="[6d]"></a>ProducerHeartbeatAlarm</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, canopen_lifegrd.o(i.ProducerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ProducerHeartbeatAlarm &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[17b]"></a>QuickRead</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, agreement.o(i.QuickRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QuickRead &rArr; Agreement_funF4 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changestartstop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF4
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF3
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funF1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_funEF
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>R3_2_SwitchOffPWM</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>

<P><STRONG><a name="[1b6]"></a>R3_2_SwitchOnPWM</STRONG> (Thumb, 182 bytes, Stack size 4 bytes, r3_2_g4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R3_2_SwitchOnPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[17d]"></a>RPDO_Direct_SetODentry</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, canopen_pdo.o(i.RPDO_Direct_SetODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RPDO_Direct_SetODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[174]"></a>RPDO_Direct_Trans_Init</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, canopen_pdo.o(i.RPDO_Direct_Trans_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RPDO_Direct_Trans_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjDict_Get_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[106]"></a>Ramp_Speed</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bsp_bdcmotor.o(i.Ramp_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[17e]"></a>RegisterSetOnDentry_Callback</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, canopen_objacces.o(i.RegisterSetOnDentry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegisterSetOnDentry_Callback &rArr; OD_Index_san
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_Index_san
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSync
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>

<P><STRONG><a name="[17f]"></a>ReturnError1</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, agreement.o(i.ReturnError1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReturnError1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, canopen_sdo.o(i.SDOTimeoutAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SDOTimeoutAlarm &rArr; SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Err_Record
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canopen_sdo.o(i.SDO_Email_Handler)
<LI> canopen_sdo.o(i.initSDOline)
</UL>
<P><STRONG><a name="[16a]"></a>SDO_Email_Handler</STRONG> (Thumb, 1948 bytes, Stack size 64 bytes, canopen_sdo.o(i.SDO_Email_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SDO_Email_Handler &rArr; failedSDO &rArr; SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSDOlineRestBytes
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineRestBytes
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSDO
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[181]"></a>SDO_Err_Record</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, canopen_sdo.o(i.SDO_Err_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[188]"></a>SDOlineToObjdict</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, canopen_sdo.o(i.SDOlineToObjdict))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[186]"></a>SDOtoLine</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, canopen_sdo.o(i.SDOtoLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDOtoLine
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[18f]"></a>SPD_GetAvrgMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetAvrgMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>

<P><STRONG><a name="[9d]"></a>SPD_IsMecSpeedReliable</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, speed_pos_fdbk.o(i.SPD_IsMecSpeedReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_CalcAvrgMecSpeedUnit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[a8]"></a>STC_CalcTorqueReference</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, speed_torq_ctrl.o(i.STC_CalcTorqueReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
</UL>

<P><STRONG><a name="[ac]"></a>STC_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[9b]"></a>STC_ExecRamp</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, speed_torq_ctrl.o(i.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetTorqueRef
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[191]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[190]"></a>STC_GetTorqueRef</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetTorqueRef))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>

<P><STRONG><a name="[9a]"></a>STC_SetControlMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[1b7]"></a>STC_SetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[192]"></a>STM_FaultProcessing</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>

<P><STRONG><a name="[1b2]"></a>STM_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[149]"></a>STM_NextState</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, state_machine.o(i.STM_NextState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>

<P><STRONG><a name="[193]"></a>STSPIN32G4_clearFaults</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stspin32g4.o(i.STSPIN32G4_clearFaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STSPIN32G4_clearFaults &rArr; STSPIN32G4_writeReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_writeReg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>STSPIN32G4_getStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stspin32g4.o(i.STSPIN32G4_getStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STSPIN32G4_getStatus &rArr; STSPIN32G4_readReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_readReg
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_unlockReg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_lockReg
</UL>

<P><STRONG><a name="[197]"></a>STSPIN32G4_init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, stspin32g4.o(i.STSPIN32G4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STSPIN32G4_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>STSPIN32G4_lockReg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stspin32g4.o(i.STSPIN32G4_lockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = STSPIN32G4_lockReg &rArr; STSPIN32G4_writeReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_writeReg
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_getStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_setVCC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_reset
</UL>

<P><STRONG><a name="[196]"></a>STSPIN32G4_readReg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stspin32g4.o(i.STSPIN32G4_readReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STSPIN32G4_readReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_setVCC
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_getStatus
</UL>

<P><STRONG><a name="[199]"></a>STSPIN32G4_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stspin32g4.o(i.STSPIN32G4_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = STSPIN32G4_reset &rArr; STSPIN32G4_unlockReg &rArr; STSPIN32G4_writeReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_writeReg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_unlockReg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_lockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>STSPIN32G4_setVCC</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, stspin32g4.o(i.STSPIN32G4_setVCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = STSPIN32G4_setVCC &rArr; STSPIN32G4_unlockReg &rArr; STSPIN32G4_writeReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_writeReg
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_unlockReg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_readReg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_lockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>STSPIN32G4_unlockReg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stspin32g4.o(i.STSPIN32G4_unlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = STSPIN32G4_unlockReg &rArr; STSPIN32G4_writeReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_writeReg
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_getStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_setVCC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_reset
</UL>

<P><STRONG><a name="[194]"></a>STSPIN32G4_writeReg</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stspin32g4.o(i.STSPIN32G4_writeReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STSPIN32G4_writeReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_setVCC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_reset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_clearFaults
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_unlockReg
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_lockReg
</UL>

<P><STRONG><a name="[19c]"></a>SendBootUp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, canopen_nmt.o(i.SendBootUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SendBootUp &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[187]"></a>SendSDO</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, canopen_sdo.o(i.SendSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Err_Record
</UL>

<P><STRONG><a name="[19d]"></a>SensorlessBLDC1_PhaseChange</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, sensorless bldc.o(i.SensorlessBLDC1_PhaseChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SensorlessBLDC1_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_Start
</UL>

<P><STRONG><a name="[19e]"></a>Sensorless_ChangePwm</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sensorless bldc.o(i.Sensorless_ChangePwm))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_Start
</UL>

<P><STRONG><a name="[12c]"></a>Sensorless_Start</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, sensorless bldc.o(i.Sensorless_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sensorless_Start &rArr; BEMF
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorless_ChangePwm
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorlessBLDC1_PhaseChange
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEMF
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[13f]"></a>SetAlarm</STRONG> (Thumb, 136 bytes, Stack size 36 bytes, canopen_timer.o(i.SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[c1]"></a>SetMotorSpeed</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, bsp_bdcmotor.o(i.SetMotorSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SetMotorSpeed &rArr; BLDC2_PhaseChange &rArr; MC_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC2_PhaseChange
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLDC1_PhaseChange
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>

<P><STRONG><a name="[c0]"></a>SetMotorStop</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp_bdcmotor.o(i.SetMotorStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetMotorStop
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
</UL>

<P><STRONG><a name="[93]"></a>SetNodeId</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, canopen_nmt.o(i.SetNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
</UL>

<P><STRONG><a name="[94]"></a>SetState</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, canopen_nmt.o(i.SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
</UL>

<P><STRONG><a name="[1a3]"></a>Startagreement</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, agreement.o(i.Startagreement))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Startagreement &rArr; InternalFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRight
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changestartstop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnRight
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Agreement_fun3
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>StopSync</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, canopen_sync.o(i.StopSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StopSync &rArr; RegisterSetOnDentry_Callback &rArr; OD_Index_san
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1a2]"></a>SwitchCommunication_State</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, canopen_nmt.o(i.SwitchCommunication_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSync
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBootUp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
</UL>

<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SysTick_Handler &rArr; MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[1ce]"></a>Sys_Time</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.Sys_Time))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>SystemClock_Config</STRONG> (Thumb, 202 bytes, Stack size 160 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_stm32g4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.TIM1_BRK_TIM15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Sensorless_Start &rArr; BEMF
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32g4xx_mc_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM2_IRQHandler &rArr; HALL_TIMx_UP_IRQHandler &rArr; HALL_Init_Electrical_Angle
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_UP_IRQHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_CC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Sensorless_Start &rArr; BEMF
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, canopen_timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; TimerForCan &rArr; TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerForCan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.TIM8_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_mc_it.o(i.TIM8_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[12a]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[122]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1b4]"></a>TSK_ChargeBootCapDelayHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_ChargeBootCapDelayHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1bf]"></a>TSK_ChargeBootCapDelayHasElapsedM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_ChargeBootCapDelayHasElapsedM2))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[137]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSK_HardwareFaultTask
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[14d]"></a>TSK_MediumFrequencyTaskM1</STRONG> (Thumb, 728 bytes, Stack size 24 bytes, mc_tasks.o(i.TSK_MediumFrequencyTaskM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TSK_MediumFrequencyTaskM1 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle0
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorSpeed
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM1
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM1
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM1
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitAdditionalMethods
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Clear
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_CalcAvrgMecSpeedUnit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOnPWM
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[14e]"></a>TSK_MediumFrequencyTaskM2</STRONG> (Thumb, 796 bytes, Stack size 24 bytes, mc_tasks.o(i.TSK_MediumFrequencyTaskM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TSK_MediumFrequencyTaskM2 &rArr; FOC_CalcCurrRef &rArr; FW_CalcCurrRef &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ramp_Speed
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallStudyHandle1
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorSpeed
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM2
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM2
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitAdditionalMethods
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Clear
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_CalcAvrgMecSpeedUnit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetRestartState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_IsAligned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOnPWM
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[1b3]"></a>TSK_SetChargeBootCapDelayM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetChargeBootCapDelayM1))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1bd]"></a>TSK_SetChargeBootCapDelayM2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetChargeBootCapDelayM2))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[1ba]"></a>TSK_SetStopPermanencyTimeM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetStopPermanencyTimeM1))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1c0]"></a>TSK_SetStopPermanencyTimeM2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetStopPermanencyTimeM2))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[1bb]"></a>TSK_StopPermanencyTimeHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_StopPermanencyTimeHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1c1]"></a>TSK_StopPermanencyTimeHasElapsedM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_StopPermanencyTimeHasElapsedM2))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[1c2]"></a>TimeDispatch</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, canopen_timer.o(i.TimeDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerForCan
</UL>

<P><STRONG><a name="[1b0]"></a>TimerForCan</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, canopen_timer.o(i.TimerForCan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerForCan &rArr; TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[134]"></a>UART_CheckIdleState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[132]"></a>UART_SetConfig</STRONG> (Thumb, 718 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[135]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[138]"></a>UFCP_OVR_IRQ_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_OVR_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UFCP_OVR_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[13b]"></a>UFCP_RX_IRQ_Handler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usart_frame_communication_protocol.o(i.UFCP_RX_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UFCP_RX_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1c3]"></a>UFCP_Send</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>

<P><STRONG><a name="[13a]"></a>UFCP_TX_IRQ_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_TX_IRQ_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[14c]"></a>UI_Scheduler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ui_task.o(i.UI_Scheduler))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[13c]"></a>UI_SerialCommunicationTimeOutStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStart))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[139]"></a>UI_SerialCommunicationTimeOutStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStop))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[43]"></a>USART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, agreement.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g431xx.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
</UL>

<P><STRONG><a name="[98]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, virtual_speed_sensor.o(i.VSS_SetMecAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[99]"></a>VSS_SetMecAngle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[12]"></a>_RxPDO_EventTimers_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_pdo.o(i._RxPDO_EventTimers_Handler))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1c5]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e1]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[183]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1e2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c7]"></a>_getODentry</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, canopen_objacces.o(i._getODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[d]"></a>_heartbeatError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canopen_lifegrd.o(i._heartbeatError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _heartbeatError &rArr; MC_StopMotor2 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor2
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_initialisation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_nmt.o(i._initialisation))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>_operational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_nmt.o(i._operational))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_post_SlaveStateChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_lifegrd.o(i._post_SlaveStateChange))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_sync.o(i._post_TPDO))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_sync.o(i._post_sync))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_preOperational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_nmt.o(i._preOperational))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>_sendPDOevent</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, canopen_pdo.o(i._sendPDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[92]"></a>_setODentry</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, canopen_objacces.o(i._setODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
</UL>

<P><STRONG><a name="[11]"></a>_storeODSubIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_od.o(i._storeODSubIndex))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1c9]"></a>buildPDO</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, canopen_pdo.o(i.buildPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[1a6]"></a>emergencyInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, canopen_emcy.o(i.emergencyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emergencyInit &rArr; RegisterSetOnDentry_Callback &rArr; OD_Index_san
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1a7]"></a>emergencyStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_emcy.o(i.emergencyStop))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[184]"></a>failedSDO</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, canopen_sdo.o(i.failedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = failedSDO &rArr; SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Err_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[6a]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[19f]"></a>getElapsedTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canopen_timer.o(i.getElapsedTime))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>

<P><STRONG><a name="[16c]"></a>getNodeId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canopen_nmt.o(i.getNodeId))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
</UL>

<P><STRONG><a name="[189]"></a>getSDOfreeLine</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, canopen_sdo.o(i.getSDOfreeLine))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[185]"></a>getSDOlineOnUse</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, canopen_sdo.o(i.getSDOlineOnUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
</UL>

<P><STRONG><a name="[18d]"></a>getSDOlineRestBytes</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, canopen_sdo.o(i.getSDOlineRestBytes))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[170]"></a>heartbeatInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, canopen_lifegrd.o(i.heartbeatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[16f]"></a>heartbeatStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, canopen_lifegrd.o(i.heartbeatStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[18a]"></a>initSDOline</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, canopen_sdo.o(i.initSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[1a8]"></a>lifeGuardInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canopen_lifegrd.o(i.lifeGuardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lifeGuardInit &rArr; heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1a9]"></a>lifeGuardStop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canopen_lifegrd.o(i.lifeGuardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lifeGuardStop &rArr; heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[18e]"></a>lineToSDO</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, canopen_sdo.o(i.lineToSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; CANopen_Parameter_Init &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startagreement
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_setVCC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_reset
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STSPIN32G4_clearFaults
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnError1
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Drive_Para
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteCheck
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Time
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM15_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[18c]"></a>objdictToSDOline</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, canopen_sdo.o(i.objdictToSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = objdictToSDOline &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[169]"></a>proceedPDO</STRONG> (Thumb, 732 bytes, Stack size 104 bytes, canopen_pdo.o(i.proceedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = proceedPDO &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_SetODentry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[168]"></a>proceedSYNC</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, canopen_sync.o(i.proceedSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[1a5]"></a>resetSDO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, canopen_sdo.o(i.resetSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = resetSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[182]"></a>resetSDOline</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, canopen_sdo.o(i.resetSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[171]"></a>sendOnePDOevent</STRONG> (Thumb, 300 bytes, Stack size 88 bytes, canopen_pdo.o(i.sendOnePDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInhibitTimerAlarm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>

<P><STRONG><a name="[18b]"></a>setSDOlineRestBytes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canopen_sdo.o(i.setSDOlineRestBytes))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1a0]"></a>setTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, canopen_timer.o(i.setTimer))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a0]"></a>FDCAN_Config</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, main.o(i.FDCAN_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FDCAN_Config &rArr; HAL_FDCAN_ConfigGlobalFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>MX_ADC1_Init</STRONG> (Thumb, 272 bytes, Stack size 128 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>MX_ADC2_Init</STRONG> (Thumb, 266 bytes, Stack size 120 bytes, main.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>MX_GPIO_Init</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>MX_I2C3_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>MX_IWDG_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>MX_NVIC_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, main.o(i.MX_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MX_NVIC_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>MX_TIM15_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(i.MX_TIM15_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM15_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>MX_TIM16_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM16_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>MX_TIM1_Init</STRONG> (Thumb, 382 bytes, Stack size 152 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakInput
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>MX_TIM4_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>MX_TIM6_Init</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, main.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>MX_TIM8_Init</STRONG> (Thumb, 394 bytes, Stack size 144 bytes, main.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakInput
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>RCC_GetSysClockFreqFromPLLSource</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.RCC_GetSysClockFreqFromPLLSource))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[e7]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[e8]"></a>FLASH_Program_Fast</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[e4]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[121]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[123]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[124]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[125]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[126]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, stm32g4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[12e]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32g4xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[141]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[140]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[f0]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f4]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[f1]"></a>I2C_TransferConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32g4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[ef]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32g4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[f2]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f5]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[db]"></a>FDCAN_CalcultateRamBlockAddresses</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.FDCAN_CalcultateRamBlockAddresses))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[cd]"></a>FDCAN_CopyMessageToRAM</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, stm32g4xx_hal_fdcan.o(i.FDCAN_CopyMessageToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>

<P><STRONG><a name="[ba]"></a>HALL_Init_Electrical_Angle</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, hall_speed_pos_fdbk.o(i.HALL_Init_Electrical_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HALL_Init_Electrical_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Clear
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_TIMx_UP_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>Agreement_fun3</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, agreement.o(i.Agreement_fun3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Agreement_fun3 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startagreement
</UL>

<P><STRONG><a name="[7f]"></a>Agreement_funEF</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, agreement.o(i.Agreement_funEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Agreement_funEF &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
</UL>

<P><STRONG><a name="[80]"></a>Agreement_funF1</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, agreement.o(i.Agreement_funF1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Agreement_funF1 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
</UL>

<P><STRONG><a name="[81]"></a>Agreement_funF2</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, agreement.o(i.Agreement_funF2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Agreement_funF2 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
</UL>

<P><STRONG><a name="[82]"></a>Agreement_funF3</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, agreement.o(i.Agreement_funF3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Agreement_funF3 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
</UL>

<P><STRONG><a name="[83]"></a>Agreement_funF4</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, agreement.o(i.Agreement_funF4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Agreement_funF4 &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
</UL>

<P><STRONG><a name="[180]"></a>ReturnRight</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, agreement.o(i.ReturnRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReturnRight &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startagreement
</UL>

<P><STRONG><a name="[17c]"></a>changestartstop</STRONG> (Thumb, 654 bytes, Stack size 16 bytes, agreement.o(i.changestartstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = changestartstop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startagreement
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QuickRead
</UL>

<P><STRONG><a name="[145]"></a>GetPage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(i.GetPage))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalFlash
</UL>

<P><STRONG><a name="[1ca]"></a>sendPdo</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, canopen_pdo.o(i.sendPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sendPdo &rArr; CAN2_Send_Msg &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[1c6]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
