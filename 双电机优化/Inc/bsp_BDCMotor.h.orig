#ifndef __BDCMOTOR_TIM_H__
#define __BDCMOTOR_TIM_H__

/* 包含头文件 ----------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "MC_PID_regulators.h"
typedef int32_t  s32;
typedef int16_t s16;
typedef int8_t  s8;

typedef uint32_t  u32;
typedef uint16_t u16;
typedef uint8_t  u8;

#define POLE_PAIRES  2
#define POLE_PAIRES2  2
#define PWM_PERIOD 8400
#define PERCENT_95_OF_PWM_PERIOD 6000

#define NEGATIVE          (s8)-1
#define POSITIVE          (s8)1
#define NEGATIVE_SWAP     (s8)-2
#define POSITIVE_SWAP     (s8)2
#define ERROR1             (s8)3
#define MISSTEP           (s8)-3

#define MOTOR_NUM 14
#define CCW  1  //逆时针
#define CW  0   //顺时针
#define STOPSTOP 2 //停止
#define MOTOR_COMMUTATION_DOWNTIME   1000   //电机换向停机时间，该值单位为/500us    8000*500 = 4 000 000 us  = 4S

#define MOTOR0CCW()   { TIM1->EGR = 1;
	TIM2->CCR1 = 0;\
                        HAL_GPIO_WritePin(GPIOD,PWM_BL1_Pin,GPIO_PIN_SET);\
                        HAL_GPIO_WritePin(GPIOD,PWM_AL1_Pin,GPIO_PIN_RESET);\
  if(MotorControl[0].PWM_Duty<0) TIM2->CCR2 =  -MotorControl[0].PWM_Duty;\
                        }

#define MOTOR0CW()    { TIM2->CCR2 = 0;\
                        HAL_GPIO_WritePin(GPIOD,PWM_AL1_Pin,GPIO_PIN_SET);\
                        HAL_GPIO_WritePin(GPIOD,PWM_BL1_Pin,GPIO_PIN_RESET);\
  if(MotorControl[0].PWM_Duty>0)TIM2->CCR1 = MotorControl[0].PWM_Duty;\
                        }

#define MOTOR0STOP()  {  TIM2->CCR1 = 0;\
                        TIM2->CCR2 = 0;\
                        HAL_GPIO_WritePin(GPIOD,PWM_AL1_Pin,GPIO_PIN_SET);\
                        HAL_GPIO_WritePin(GPIOD,PWM_BL1_Pin,GPIO_PIN_SET);\
                        MotorControl[0].PWM_Duty = 0;}

//#define MOTOR0CCW()   { TIM2->CCR1 = 0;\
//										    HAL_GPIO_WritePin(GPIOD,PWM_BL1_Pin,GPIO_PIN_SET);\
//												for(u16 i=0; i< 500 ;i++);\
//												HAL_GPIO_WritePin(GPIOD,PWM_AL1_Pin,GPIO_PIN_RESET);\
//										    TIM2->CCR2 =  -MotorControl[0].PWM_Duty;\
//										    }

//#define MOTOR0CW()    { TIM2->CCR2 = 0;\
//												HAL_GPIO_WritePin(GPIOD,PWM_AL1_Pin,GPIO_PIN_SET);\
//												for(u16 i=0; i< 500 ;i++);\
//												HAL_GPIO_WritePin(GPIOD,PWM_BL1_Pin,GPIO_PIN_RESET);\
//												TIM2->CCR1 = MotorControl[0].PWM_Duty;\
//												}

//#define MOTOR0STOP()	{	TIM2->CCR1 = 0;\
//												TIM2->CCR2 = 0;\
//												HAL_GPIO_WritePin(GPIOD,PWM_AL1_Pin,GPIO_PIN_SET);\
//												HAL_GPIO_WritePin(GPIOD,PWM_BL1_Pin,GPIO_PIN_SET);\
												MotorControl[0].PWM_Duty = 0;}

#define MOTOR1CCW()		{	TIM2->CCR3 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_BL2_Pin,GPIO_PIN_SET);\
												for(u16 i=0; i< 500 ;i++);\
												HAL_GPIO_WritePin(GPIOD,PWM_AL2_Pin,GPIO_PIN_RESET);\
												TIM2->CCR4 =  -MotorControl[1].PWM_Duty;\
												}

#define MOTOR1CW()		{	TIM2->CCR4 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_AL2_Pin,GPIO_PIN_SET);\
												for(u16 i=0; i< 500 ;i++);\
												HAL_GPIO_WritePin(GPIOD,PWM_BL2_Pin,GPIO_PIN_RESET);\
												TIM2->CCR3 = MotorControl[1].PWM_Duty;\
												}

#define MOTOR1STOP()	{	TIM2->CCR3 = 0;\
												TIM2->CCR4 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_AL2_Pin,GPIO_PIN_SET);\
												HAL_GPIO_WritePin(GPIOD,PWM_BL2_Pin,GPIO_PIN_SET);\
												MotorControl[1].PWM_Duty = 0;}

#define MOTOR2CCW()		{ TIM4->CCR1 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_BL3_Pin,GPIO_PIN_SET);\
												for(u16 i=0; i< 500 ;i++);\
												HAL_GPIO_WritePin(GPIOD,PWM_AL3_Pin,GPIO_PIN_RESET);\
												TIM4->CCR2 =  -MotorControl[2].PWM_Duty;\
												}

#define MOTOR2CW()		{ TIM4->CCR2 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_AL3_Pin,GPIO_PIN_SET);\
												for(u16 i=0; i< 500 ;i++);\
												HAL_GPIO_WritePin(GPIOD,PWM_BL3_Pin,GPIO_PIN_RESET);\
												TIM4->CCR1 = MotorControl[2].PWM_Duty;\
												}

#define MOTOR2STOP()  { TIM4->CCR1 = 0;\
												TIM4->CCR2 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_AL3_Pin,GPIO_PIN_SET);\
												HAL_GPIO_WritePin(GPIOD,PWM_BL3_Pin,GPIO_PIN_SET);\
												MotorControl[2].PWM_Duty = 0;}

#define MOTOR9CCW()		{	TIM4->CCR3 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_BL4_Pin,GPIO_PIN_SET);\
												for(u16 i=0; i< 500 ;i++);\
												HAL_GPIO_WritePin(GPIOD,PWM_AL4_Pin,GPIO_PIN_RESET);\
												TIM4->CCR4 =  -MotorControl[9].PWM_Duty;\
												}

#define MOTOR9CW()		{	TIM4->CCR3 = MotorControl[9].PWM_Duty;\
												HAL_GPIO_WritePin(GPIOD,PWM_AL4_Pin,GPIO_PIN_SET);\
												for(u16 i=0; i< 500 ;i++);\
												HAL_GPIO_WritePin(GPIOD,PWM_BL4_Pin,GPIO_PIN_RESET);\
												TIM4->CCR4 = 0;\
												}

#define MOTOR9STOP()	{	TIM4->CCR3 = 0;\
												TIM4->CCR4 = 0;\
												HAL_GPIO_WritePin(GPIOD,PWM_AL4_Pin,GPIO_PIN_SET);\
												HAL_GPIO_WritePin(GPIOD,PWM_BL4_Pin,GPIO_PIN_SET);\
												MotorControl[9].PWM_Duty = 0;}

typedef struct
{
    uint16_t GetADCValue;//获取的ADC值
    uint16_t FilterValue;//滤波后的ADC值
    uint16_t MaxValue1;   //最大值第一阶段
    uint16_t MaxValue2;   //最大值第二阶段
		uint16_t MaxValue3;   //最大值第三阶段
    uint16_t MaxValue4;   //最大值第阶段
    uint16_t MinValue;   //最小值
    u16 OFCnt1;
    u16 OFCnt2;
    u16 OFCnt3;
    u16 OFCnt4;
		u16 OFCnt1_T;
    u16 OFCnt2_T;
	  u16 OFCnt3_T;
    u16 OFCnt4_T;
    float ConversionFactor; //转化系数
    float   ActualUnitValue;  //转换为实际单位值

} ADC_ValueParameters_t;

typedef struct
{
    uint8_t ChangeFlag;     //第一次启动标志
    uint8_t HallState;               //当前Hall状态
    uint8_t PrevHallState;           //上一次Hall状态
    uint8_t HallState_Temp;          //两次Hall状态组合，用来判断方向
    uint8_t HallState_CCW;
    uint8_t HallState_CW;
    uint16_t HALL_CaptureValue;      //Hall捕获值
    uint16_t HALL_PreCaptureValue;   //上一次Hall捕获值
    u32 PreHALL_OVF_Counter;         //上一次计数器溢出值
    s32 HALL_CaptureValueDelta;

} HALL_Parameters_t;

typedef struct
{
    uint8_t  StudySectorCnt;
    uint16_t StudySectorCnt2;
    uint16_t StudySectorCnt3;
    uint8_t HallTab[6];
    uint8_t HallSector;
    int16_t HallCommPWM;
    uint8_t CommuntionState;
}
HALL_Study_t;

extern HALL_Study_t HALL_Study[2];
typedef struct
{
    int16_t Speed_Set;
    int16_t	Location_Set;
    int16_t Speed_Ref;
    int32_t Speed_Real;
    int16_t Acceleration;
    int16_t Deceleration;
    int16_t SpeedLimit;

    int16_t PWM_DutySet;
    int16_t PWM_Duty;
    uint16_t Pole_Paires;
    uint8_t Fault_Flag;

    int8_t  Direction;
    int8_t  LastMotorDirection;
    FunctionalState  Motor_Start_Stop;

    ADC_ValueParameters_t	Current;
    HALL_Parameters_t   Hall;

} MotorControlParameters_t;





extern MotorControlParameters_t MotorControl[MOTOR_NUM];


extern uint8_t PrevHallState1,PrevHallState2,HallState1,HallState2;
extern uint16_t  HALL_CaptureValue,HALL_PreCaptureValue,Speed_Hz;
extern s16 BLDC1_Speed_RPM ;

extern uint16_t  HALL_CaptureValue2,HALL_PreCaptureValue2;
extern s16 BLDC2_Speed_RPM ;


extern s32 HALL_CaptureValueDelta,HALL_CaptureValueDelta2;
extern u32 HALL_OVF_Counter  ;

//extern PID_Struct_t   PID_Speed_InitStruct[MOTOR_NUM];




typedef enum
{
    Motor0,
    Motor1,
    Motor2,
    Motor3,
    Motor4,
    Motor5,
    Motor6,
    Motor7,
    Motor8,
    Motor9
} Motor_NUM_t;


///* 函数声明 ------------------------------------------------------------------*/

//void BDCMOTOR_TIMx_Init(void);
//void SetMotorDir(int16_t Dir);
void SetMotorSpeed(uint8_t Motor_NUM,int16_t PWM_Duty);
void SetMotorStop(uint8_t Motor_NUM);
void  OneFilter(u16 NewValue,u16 OldValue,u8 FilterFactor );
u8 HALL_GetPhase2(void);
void BLDC1_PhaseChange(u8 bHallState, s16 PWM_Duty);
void BLDC2_PhaseChange(u8 bHallState, s16 PWM_Duty);
void HALLSTUDY_PhaseChange0(u8 bHallState);
void HALLSTUDY_PhaseChange1(u8 bHallState);
s16 Ramp_Speed(u8 Mortor_NUM);
s16 Ramp_PPWM(u8 Mortor_NUM);

void HallStudyHandle0(void);
void HallStudyHandle1(void);


#endif	/* __BDCMOTOR_TIM_H__ */
/******************* (C) COPYRIGHT 2015-2020 硬石嵌入式开发团队 *****END OF FILE****/
